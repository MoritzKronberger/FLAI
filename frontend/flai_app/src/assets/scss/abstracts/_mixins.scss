// media queries
@mixin media-query($canvas) {
  @if $canvas == S {
    @media only screen and (max-width: $S) {
      @content;
    }
  } @else if $canvas == M {
    @media only screen and (max-width: $M) {
      @content;
    }
  } @else if $canvas == L {
    @media only screen and (max-width: $L) {
      @content;
    }
  }
}

// font mixins
// from https://gist.github.com/fabricelejeune/bcdd3d4725d4e4cea672
@mixin font($group, $variant: regular, $properties: family weight style, $font-stack: $base-font-stack) {
  $font-properties: map-deep-get($font-stack, $group, $variant);

  @if $font-properties {
    @include track-fonts($group, $variant);
    @each $property, $values in $font-properties {
      @if contains($properties, $property) {
        font-#{$property}: map-get($font-properties, $property);
      }
    }
  }
}

// keeping track of used fonts
// from https://gist.github.com/fabricelejeune/bcdd3d4725d4e4cea672
@mixin track-fonts($group, $variant) {
  @if map-has-key($used-fonts, $group) == false {
    $used-fonts: map-merge(
      $used-fonts,
      (
        $group: (),
      )
    ) !global;
  }

  $font-map: map-get($used-fonts, $group);
  @if index($font-map, $variant) == null {
    $variations: append($font-map, $variant);
    $used-fonts: map-merge(
      $used-fonts,
      (
        $group: $variations,
      )
    ) !global;
  }
}

// font import mixin
@mixin import-fonts($font-stack: $base-font-stack) {
  @each $group, $variations in $used-fonts {
    @each $variant in $variations {
      $font-properties: map-deep-get($font-stack, $group, $variant);

      @if $font-properties {
        // If we have a font-face key we create the font-face rule
        $font-face: map-get($font-properties, font-face);
        @if $font-face {
          $font-family: map-get($font-face, family);
          $file-path: map-get($font-face, path);
          $file-formats: map-get($font-face, formats);
          $font-weight: map-get($font-properties, weight);
          $font-style: map-get($font-properties, style);

          @if $file-formats {
            @include font-face($font-family, $file-path, $font-weight, $font-style, $file-formats);
          } @else {
            @include font-face($font-family, $file-path, $font-weight, $font-style);
          }
        }
      }
    }
  }
}

// creating font face rule
@mixin font-face(
  $font-family,
  $file-path,
  $font-weight: 400,
  $font-style: normal,
  $file-formats: eot woff2 woff ttf svg
) {
  @font-face {
    font-family: quote($font-family);
    font-style: $font-style;
    font-weight: $font-weight;

    src: url($file-path) format(quote($file-formats));
  }
}

// creating flex-box mixin
@mixin flex-box($flex-flow: column wrap, $justify-content: flex-start, $align-items: flex-start, $gap: 0vh 0vw) {
  display: flex;
  flex-flow: $flex-flow;
  justify-content: $justify-content;
  align-items: $align-items;
  gap: $gap;
}

// creating button mixin
@mixin import-button(
  $width,
  $height,
  $padding,
  $font-size,
  $color-text,
  $color-background,
  $border-color
) {
  min-width: $width;
  height: fit-content;

  //text
  @include font(GothamSSm, bold);
  text-align: center;
  font-size: $font-size;
  line-height: $line-height-base;
  color: $color-text;

  //border
  border-radius: $border-radius-s;
  border-style: solid;
  border-width: $line-width-m;
  border-color: $border-color;

  padding: $padding;

  //mouse cursor changes to a pointy finger
  cursor: pointer;

  background-color: $color-background;
  box-shadow: inset 0 0 0 0 $color-text;
  transition: ease-in-out;
  transition-duration: $trans-duration;
  outline: none;

  &:hover {
    box-shadow: inset 0 0 -$width 0 $color-text;
    color: $color-background;
  }
}

// creating switch button mixin
@mixin import-switch-button(
  $width,
  $height,
  $padding,
  $font-size,
  $color-text,
  $color-background,
  $border-color
) {
  button {
    @include import-button(
      $width,
      $height,
      $padding,
      $font-size,
      $color-text,
      $color-background,
      $border-color
    );
  }
  .switch-button-active {
    box-shadow: inset 0 0 -$width 0 $color-text;
    color: $color-background;
  }
  .switch-button-left,
  .switch-button-mid {
    border-right-width: $line-width-m * 0.5;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  .switch-button-right,
  .switch-button-mid {
    border-left-width: $line-width-m * 0.5;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
}

// creating icon button mixin
@mixin import-icon-button(
  $width,
  $height,
  $padding,
  $font-size,
  $color-text,
  $color-background,
  $border-color,
  $color-icon,
  $hover-color-icon,
) {
  @include import-button(
    $width,
    $height,
    $padding,
    $font-size,
    $color-text,
    $color-background,
    $border-color
  );
  display: flex;
  align-content: center;
  justify-content: center;

  img {
    height: calc($font-size * $line-height-base);
    width: $font-size; 
    transition: all .1s ease;
    transition-delay: 0.2s;
    filter: $color-icon;
  }
  &:hover img {
    filter: $hover-color-icon;
  }
}

// creating form mixin
@mixin form-layout($container-name, $form-width-m: 30%, $form-width-s: 30%, $input-width: 100%) {
  .#{$container-name} {
    width: $form-width-m;
    max-height: 100%;
    overflow: auto;
    padding: $padding-l 0;
    border-radius: $border-radius-m;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: $main-white;

    .form-items {
      width: 100%;
      padding: 0 $padding-l;
    }

    .flai-logo {
      width: 30%;
      margin-bottom: $margin-m;
    }

    .lead-paragraph {
      margin-bottom: $margin-m;
    }

    .bottom-paragraph {
      line-height: 1;
    }

    .bottom-paragraph .link {
      color: $main-blue;
      cursor: pointer;
    }

    .center-text {
      text-align: center;
    }

    .error-message, .error-message-right-align {
      width: 60.5%;
      color: $main-red;
      margin-bottom: $margin-s;
    }

    .error-message-right-align {
      float: right;
    }

    input,
    .primary-checkbox {
      margin-bottom: $margin-m;
    }

    .input-form-primary {
      width: $input-width;
    }

    .button-container {
      display: flex;
      justify-content: center;
    }

    .divider-line {
      margin: $margin-m 0;
      border-bottom: solid $light-grey $line-width-s;
      width: 100%;
    }

    .toggle-checkbox {
      height: $input-button-height-m;
      @include flex-box(row, space-between, center);
      .box {
        height: 22px;
        width: 60%;
        @include flex-box(row, flex-start, flex-start, 10%);
      }
      .body-medium {
        text-align: end;
        line-height: $input-button-height-m;
        height: $input-button-height-m;
      }
    }

    .button-container-login {
      margin-top: $margin-m;
      width: 100%;
      text-align: center;
    }

    .button-container-forms {
      margin-top: $margin-l;
      width: 100%;
      @include flex-box(row, center, flex-start, $margin-s);
    }

    @include media-query(L) {
      width: $form-width-m;
    }

    @include media-query(M) {
      width: $form-width-s;
    }

    @include media-query(S) {
      width: 90%;
    }
  }
}
